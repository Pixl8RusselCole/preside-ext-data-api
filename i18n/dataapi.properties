api.title=Preside data API
api.description=API allowing access to data stored in the Preside system.
api.version=1.0.0

trait.pagination.title=Pagination
trait.pagination.description=Pagination is performed with two query parameters, `page` and `pageSize`. If omitted, these will default to `1` and `100` respectively.\n\
\n\
When returning a successful response, the API will set three pagination related headers:\n\
\n\
1. `X-Total-Records`: The total number of records in the recordset\n\
2. `X-Total-Pages`: The total number of paginated pages in the recordset (based on the `pageSize`)\n\
3. `Link`: Links to _next_ and _previous_ URLs to use when fetching the previous or next page of results. In the form: `<{nexthref}>; rel="next", <{prevhref}>; rel="prev"`

trait.errorhandling.title=Error handling
trait.errorhandling.description=When an operation is successful, a `20x` status will be returned. Non `20x` status codes will be returned for controlled errors such as authentication and badly formatted input data. These errors are documented with the expected return bodies in the individual method documentation, below.\n\
\n\
Any API call may return a `500` error indicating that something unexpected has happened on the server. The API will supply a json body with at least the following (example):\n\
\n\
```json\n\
{\n\
  "title":"General error type title",\n\
  "message":"General error message",\n\
  "detail":"Further detail of the error",\n\
  "errorCode":500\n\
}\n\
```


tags.queue.title=Queue management
tags.queue.description=Operations related to processing the system data change queue. When activated for your REST user, the queue enables you to poll the system for changes to data so that you can keep your external systems in sync.

basic.auth.name=Basic
basic.auth.description=Basic HTTP Authentication is used to authenticate with the API. You will be given a secret API token and this must be used as the authentication _username_. No password is required and will be ignored if supplied.

headers.XTotalRecords.description=Total number of records in paginated recordset or queue
headers.XTotalPages.description=Total number of pages in the paginated recordset (based on input page size)
headers.Link.description=Contains pagination info in the form: '<{nexthref}>; rel="next", <{prevhref}>; rel="prev"'. Either or both prev and next links may be omitted if there are no previous or next records.

schemas.queueItem.operation=The change operation that occurred.
schemas.queueItem.entity=The name of the entity whose record has been created, modified or deleted.
schemas.queueItem.recordId=The ID of the entity record that has been created, modified or deleted.
schemas.queueItem.queueId=The ID of the queue entry. Once you have finished processing the queue item, you are responsible for removing it from the queue using this ID.
schemas.queueItem.timestamp=UNIX Timestamp (number of seconds since 1970-01-01) representing the date that the record was inserted, updated or deleted
schemas.queueItem.record=For the `update` and `insert` operations, this object will represent the record as if you had fetched it with GET /entity/{entity}/{recordId}/. In other words, <strong>it will always represent the latest state of the record</strong>. For DELETE operations, the record will be empty.
schemas.queueItem.record.atomic=For the `update` and `insert` operations, this object will represent the data that has <strong>changed</strong> on the record. Fields that have not been effected will not be included. For DELETE operations, the record will be empty.

schemas.validationMessage.field=Name of the field containing the error
schemas.validationMessage.message=Detailed error message
schemas.validationFailureMultiple.title=Multi-record validation errors for **{1}**
schemas.validationFailure.valid=Whether or not this record has passed validation.
schemas.validationFailure.errorMessages=Array of error messages relating to this record.

operation.queue.get=Get the next entry in the {1} data change queue. Returns empty object {} if no data in the queue. Once retrieved, you **MUST** remove the item from the queue using the DELETE API. If you do not remove the item, it will continue to be returned from the GET call and you will not be able to process any more queue items.
operation.queue.get.multi=Get the next set of up to {2} entries in the {1} data change queue. Returns an empty array [] if there are no items in the queue. Once retrieved, you **MUST** remove the items from the queue using the DELETE API. If you do not remove the items, they will continue to be returned from the GET call and you will not be able to process any more queue items.
operation.queue.get.atomic=A new entry will appear in the queue any time a record is inserted, updated or deleted. Items in the queue are always returned in the order that they are created and will only contain the data that was changed during the operation. This means that you may receive multiple entries for the same record if multiple operations are performed on the record before you get a chance to process the queue.
operation.queue.get.nonatomic=Entries will appear in the queue to indicate that something has changed in the record. Changes are <strong>not</strong> atomic. This means that if a record is created in the application and receives two updates before you process the queue, you will still only see a single item. Likewise, if an item is inserted in the application and then deleted before you process the queue, you will not see the item in the queue at all. The record you receive back from each queue item represents its current state as if you had called GET `/entity/{entityname}/{recordid}/`.
operation.queue.get.200.description=Either empty object for no items, or an object representing the next queued change.
operation.queue.get.multi.200.description=Either empty array for no items, or an array of objects representing the next set of queued changes.

operation.queue.delete=Removes the given {1} queue item from the queue.
operation.queue.delete.200.description=Item is no longer in the {1} queue
operation.queue.delete.params.queueId=ID of the queue item you wish to remove from the queue
operation.queue.delete.schema.removed=Number of items removed from the queue. i.e. 1 for success, 0 for no items removed. Either way, operation should be deemed as successful as the item is definitely no longer in the queue.

operation.queue.batch.delete=Removes the given array of {1} queue items from the queue. Each item in the array must be a string UUID representing the Queue item IDs to be deleted. These IDs can be found in the response body returned from the GET /queue{2} operation
operation.queue.batch.delete.200.description=Items are no longer in the {1} queue
operation.queue.batch.delete.schema.removed=Number of items removed from the queue. i.e. 0 for failure, size of passed array of IDs for complete success, something in between for something else. If returning less than the passed number of IDs, this is likely to mean that the items are already removed.
operation.queue.batch.delete.post.body.description=Array of queue item IDs (UUID strings).

operation.get.description=Used to fetch **{1}** records from the system.
operation.get.params.page=For pagination; the page number to fetch. Default is 1.
operation.get.params.pageSize=For pagination; the number of records per page. Default is 100.
operation.get.params.fields=Comma separated list of fields to fetch per record. Default is all fields. Possible values: [`{2}`].
operation.get.200.description=Array of **{1}** records

operation.get.by.id.description=Used to fetch a single **{1}** record by ID.
operation.get.by.id.200.description=**{1}** record object
operation.get.by.id.404.description=No record found for the given recordId
operation.get.by.id.params.recordId=ID of the **{1}** record that you wish to fetch.

operation.put.description=Used to batch update **{1}** records.
operation.put.200.description=Array of updated **{1}** records.
operation.put.422.description=Data validation failure. Returned when one or more entities failed validation. No records will have been updated.
operation.put.body.description=Array of **{1}** objects to update. Missing fields per item will be ignored and only fields given will be updated.

operation.put.by.id.description=Used to update an individual **{1}** record by ID.
operation.put.by.id.200.description=Updated **{1}** record object
operation.put.by.id.404.description=No record found for the given ID
operation.put.by.id.422.description=Data validation failure. Returned when one or more fields have failed validation.
operation.put.by.id.params.recordId=ID of the **{1}** record that you wish to update.
operation.put.by.id.body.description=**{1}** object with fields to update. Missing fields will be ignored.


operation.post.description=Used to create **{1}** records.
operation.post.200.description=Array of created **{1}** records.
operation.post.422.description=Data validation failure. Returned when one or more entities failed validation. No records will have been created.
operation.post.body.description=Array of **{1}** objects to create.

operation.delete.description=Used to delete an individual **{1}** record by ID.
operation.delete.200.description=Response to valid request to delete records
operation.delete.schema.removed=Number of items actually deleted by the operation, i.e. 1 or 0. If 0, assume that the item did not exist.
operation.delete.params.recordId=ID of the **{1}** record you wish to delete

field.id.description=Primary key of the record.
field.datemodified.description=Date that the record was last modified.
field.datecreated.description=Date that the record was created.


auth.configuration.no.users=No users are currently configured to access this API. Add a user to get started.
auth.user.table.name.th=User
auth.user.table.queueenabled.th=Change queue enabled?
add.user.btn=Add user
revoke.access.prompt=Revoke access to the {2} API from user: {1}
user.access.revoked=Access successfully revoked from user

add.user.page.title=Add user
add.user.page.subtitle=
add.user.page.crumb=Add user

edit.user.page.title=Configure access for {1}
edit.user.page.subtitle=
edit.user.page.crumb=Configure access for {1}

configure.access.form.field.access_settings.title=Access rules
configure.access.form.fieldset.user.title=User
configure.access.form.fieldset.user.description=Choose from existing API users from any other APIs in the system, or type a new user name and hit ENTER to quickly create an API user.
configure.access.form.fieldset.access.title=Access rules
configure.access.form.fieldset.access.description=Access is divided into two main concerns, "standard REST calls" for interacting with data and "Change queue" subscriptions that allow users to poll a queue of notifications of data changing in the system. Use the table below to control either global access to these areas and/or fine-tune the access per entity in the API.

configure.access.form.add.user.btn=Add user
configure.access.form.save.btn=Save configuration

configure.access.table.standard.rest.th=Standard REST
configure.access.table.queue.th=Change queue
configure.access.table.standard.all.th=All
configure.access.table.standard.read.th=Read
configure.access.table.standard.insert.th=Insert
configure.access.table.standard.update.th=Update
configure.access.table.standard.delete.th=Delete
configure.access.table.queue.all.th=All
configure.access.table.queue.inserts.th=Inserts
configure.access.table.queue.updates.th=Updates
configure.access.table.queue.deletes.th=Deletes
configure.access.table.all.apis.th=All

user.added.confirmation=API access rules to {1} for user, {2}, have been saved successfully
user.config.saved.confirmation=API access rules to {1} for user, {2}, have been saved successfully


html.docs.path.params.title=Path parameters
html.docs.query.params.title=Query parameters
html.docs.required.param.title=required
html.docs.request.body.title=Request body schema
html.docs.responses.title=Responses
html.docs.response.body.title=Response body
html.docs.response.headers.title=Response headers

html.docs.toc.title=Table of contents

category.uncategorized.name=Uncategorized
category.uncategorized.description=The following entities have not been categorized.